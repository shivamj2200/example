
const non_repeated_num = (nums) => {
   r = 0
   for(let i = 0; i <= nums.length; i++)
     {
       r = r ^ nums[i]
     }
   return r
 }
nums = [1, 2, 8, 3, 1, 2, 3, 8, 6, 6, 7]
console.log(non_repeated_num(nums))
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const combinedArray = [...arr1, ...arr2];
console.log(combinedArray);\
var object = new Object();

object.name = "Example";
object.age = 25;

console.log(object.name); // Output: Example
console.log(object.age); // Output: 25

console.log(object);
Shallow Copy:
A shallow copy creates a new object and inserts references to the same elements as the original object
Deep Copy:
A deep copy creates a new object and recursively copies all the elements and nested objects within the original object\
function func1(message){
    console.log(`${message} ${this.name}`)
}

const person = {
    name : "shivam"
}
func1.call(person,'hello')
func1.apply(person,['hello'])

const kk = func1.bind(person,'Hii')

kk()
//for call apply bind
Rest Parameters:

Definition: Rest parameters allow you to represent an indefinite number of arguments as an array in function declarations. It's used when you want to gather multiple arguments into a single parameter, typically at the end of a function's parameter list.
Spread Operator:

Definition: The spread operator allows you to expand or spread the elements of an iterable (e.g., an array or a string) into another array, object, or function call. It's used when you want to split an iterable into individual elements.
Call by Value:

In call by value, the function receives a copy of the actual value of the argument that was passed. Any changes made to the parameter inside the function do not affect the original value outside the function.
function modifyValue(x) {
    x = x + 1; // Changes the copy of x, not the original value
}

let num = 5;
modifyValue(num);
console.log(num); // Output: 5 (unchanged)
Call by Reference:

In call by reference, the function receives a reference (memory address) to the actual object or variable in memory. Any changes made to the parameter inside the function affect the original value outside the function because they are working with the same data in memory.
function modifyObject(obj) {
    obj.key = "new value"; // Modifies the original object
}

let myObject = { key: "old value" };
modifyObject(myObject);
console.log(myObject.key); // Output: "new value" (changed)